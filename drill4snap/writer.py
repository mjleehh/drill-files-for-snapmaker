import base64
import dataclasses
from dataclasses import dataclass
from io import BytesIO
from typing import Final, TextIO

from PIL import Image

from .devices import get_device_by_name
from .parser import ToolJob


@dataclass
class JobConfinement:
    min_x: float = 0
    max_x: float = 0
    min_y: float = 0
    max_y: float = 0
    min_z: float = 0
    max_z: float = 0

    def expand_plane(self, x: float, y: float):
        self.min_x = min(self.min_x, x)
        self.max_x = max(self.max_x, x)
        self.min_y = min(self.min_y, y)
        self.max_y = max(self.max_y, y)


def generate_thumbnail(drill_diameter: float):
    im = Image.new(mode="RGBA", size=(720, 480))
    buffered = BytesIO()
    im.save(buffered, format="PNG")
    return base64.b64encode(buffered.getvalue()).decode('ascii')


HEADER_TEMPLATE = ''';Header Start
;header_type: cnc
;tool_head: standardPcbDrill
;machine: {device_name}
;renderMethod: line
;file_total_lines: 24557
;estimated_time(s): 6908.736
;is_rotate: false
;diameter: {drill_diameter}
;max_x(mm): {max_x}
;max_y(mm): {max_y}
;max_z(mm): {max_z}
;max_b(mm): 0
;min_x(mm): {min_x}
;min_y(mm): {min_y}
;min_b(mm): 0
;min_z(mm): {min_z}
;work_speed(mm/minute): 300
;jog_speed(mm/minute): 1500
;power(%): {spindle_power}
;work_size_x: {work_area_x}
;work_size_y: {work_area_y}
;origin: center
;thumbnail: data:image/png;base64,{thumbnail}
;Header End

; G-code for PCB hole drilling on snapmaker devices
; generated by drill_with_snap: https://github.com/mjleehh/drill4snap
; G-code START <<<
G90
G21
M3 P{spindle_power}
'''


def crate_file_footer(safe_height: float):
    return f'''
; stop spindle

; go to safe height
G1 Z{safe_height} F30000
; program ends
M5
M2
'''


def drill_sequence(x: float, y: float, safe_height: float, drill_depth: float):
    return f'''G1 F300 X{x} Y{y}
G1 F100 Z-{drill_depth}
G1 F300 Z{safe_height}
'''


class GcodeWriter:
    def __init__(
            self, job: ToolJob, device_name: str, *,
            spindle_power: int = 100,
            safe_height: float = 25,
            drill_depth: float = 2,
    ):
        self._job: Final = job
        self._device = get_device_by_name(device_name)
        self._spindle_power: Final = spindle_power
        self._safe_height: Final = safe_height
        self._drill_depth: Final = drill_depth
        self._confinement: Final = JobConfinement(min_z=-drill_depth, max_z=safe_height)

    def write(self, out_file_name: str):
        job = self._job
        with open(f'{out_file_name}_{job.diameter}.cnc', 'w') as out_file:
            self._determine_metrics()

            print(self._confinement)
            self._write_header(out_file)
            self._write_commands(out_file)
            out_file.write(crate_file_footer(self._safe_height))

    def _determine_metrics(self):
        for segment in self._job.segments:
            for x, y in segment.holes:
                self._confinement.expand_plane(x, y)

    def _write_header(self, out_file: TextIO):
        thumbnail = generate_thumbnail(self._job.diameter)
        work_area_x, work_area_y = self._device.work_area
        out_file.write(HEADER_TEMPLATE.format(
            device_name=self._device.name,
            drill_diameter=self._job.diameter,
            spindle_power=self._spindle_power,
            work_area_x=work_area_x, work_area_y=work_area_y,
            thumbnail=thumbnail,
            **dataclasses.asdict(self._confinement),
        ))

    def _write_commands(self, out_file: TextIO):
        for segment in self._job.segments:
            for x, y in segment.holes:
                out_file.write(drill_sequence(x, y, self._safe_height, self._drill_depth))
